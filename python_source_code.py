# -*- coding: utf-8 -*-
"""AC HRI Data Analysis v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ewWc4h7jUlwc9CGzzKpBbamL3RC0ogXn

# Default Setup
"""

# Commented out IPython magic to ensure Python compatibility.
#@title Mounting Google Drive
from google.colab import files
from google.colab import drive

from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive/My\ Drive/Colab\ Notebooks

!ls

#@title Importing libraries
import datetime
import matplotlib.pyplot as plt

import librosa
import librosa.display

import pandas as pd
import numpy as np

import statistics as st

"""# Audio Data Analysis"""

list_of_audios = [
    "D0.m4a"
    "D1.m4a",
    "D2.m4a",
    "D3.m4a",
    "D4.m4a",
    "D5.m4a",
    "D6.m4a",
    "D7.m4a",
    "D8.m4a",
    "D9.m4a",
    "D10.m4a",
    "D11.m4a"
]

# df_audio = pd.DataFrame()
def analysing_audio():
#   list_of_audios = []
  
  for audio_name in list_of_audios:
#     list_of_audio = []
    data, sampling_rate = librosa.load('ACHRIData/New Voice/' + audio_name)
    librosa.display.waveplot(data, sr=sampling_rate)
    print(sampling_rate, data.shape)
    
#     df_audio = pd.DataFrame(data, pd.Index([x / sampling_rate for x in range(len(data))]))
#     print(df_audio.head(), '\n')
    
  
#   for audio_name in list_of_audios:
#     data, sampling_rate = librosa.load('ACHRIData/New Voice/' + audio_name)
#     features = librosa.feature.mfcc(y=data, sr=sampling_rate, n_mfcc=5)
#     features = librosa.feature.delta(features, order=2)
#     librosa.display.waveplot(data, sr=sampling_rate)
#     plt.show()
#     librosa.display.specshow(features, x_axis='time')
#     plt.show()
#     print(audio_name,np.sum(features))
    
analysing_audio()

data, sampling_rate = librosa.load('ACHRIData/New Voice/D0.m4a')
librosa.display.waveplot(data, sr=sampling_rate)
plt.savefig('ACHRIData/SAVED/waveplot.png', dpi=100)
features = librosa.feature.mfcc(y=data, sr=sampling_rate, n_mfcc=5)
print(sampling_rate, data.shape)

plt.figure(figsize=(10, 4))
librosa.display.specshow(features, x_axis='time')
plt.colorbar()
plt.title('MFCC')
plt.tight_layout()
plt.savefig('ACHRIData/SAVED/mfcc.png', dpi=100)
plt.show()

features = librosa.feature.delta(features, order=2)
plt.figure(figsize=(10, 4))
librosa.display.specshow(features, x_axis='time')
plt.colorbar()
plt.title('MFCC Order 2')
plt.tight_layout()
plt.savefig('ACHRIData/SAVED/mfcc-order-2.png', dpi=100)
plt.show()

sampling_rate

print(data)

data, sampling_rate = librosa.load('ACHRIData/New Voice/D0.m4a')
features = librosa.feature.mfcc(y=data, sr=sampling_rate, n_mfcc=5)
librosa.display.waveplot(data, sr=sampling_rate)
# plt.show()
# librosa.display.specshow(features, x_axis='time')
# plt.show()
# print(len(data))
# print(np.mean(features[0]))
mfcc_delta = librosa.feature.delta(features)
# librosa.display.specshow(mfcc_delta, x_axis='time')

df_temp = pd.DataFrame(data, pd.Index([x / sampling_rate for x in range(len(data))]))
# df_temp.set_index()
df_temp

# temp_list = [x / sampling_rate for x in range(len(data))]
# temp_list[len(temp_list)-1]

print(data.shape)
print(5384672 / 22050)
print(244.20281179138323 / 60)
print(512 / sampling_rate)

# import IPython
# IPython.display.Audio(data=data, rate=sampling_rate)

print(features.shape)
print(features)
# 3620320 / 512
# 2971616 / 5804

plt.figure(figsize=(10, 4))
librosa.display.specshow(features, x_axis='time')
plt.colorbar()
plt.title('MFCC')
plt.tight_layout()

# taking average of features
x, y = features.shape
av_features = np.zeros(shape=(1, y))
# print(x, y)

for i in range(x):
  for j in range(y):
    av_features[0][j] += features[i][j]

print(av_features.shape)
print(av_features)

# counter = 0
# for i in range(y):
#   if av_features[0][i] < 0:
#     av_features[0][i] = 0
#   else:
#     counter += 1
#     av_features[0][i] = 200

print(np.mean(features))
librosa.display.specshow(av_features, x_axis='time')

librosa.display.waveplot(data, sr=sampling_rate)

list_av_features = []
for i in range(y):
  list_av_features.append(av_features[0][i])
  
print(st.mean(list_av_features))
print(st.median(list_av_features))
plt.figure(figsize=(18,5))
plt.boxplot(list_av_features, vert=False)
plt.show()

np_temp = np.zeros(shape=(1, y))
for i in range(500):
  np_temp[0][i] = 200

librosa.display.specshow(np_temp, x_axis='time')

features_new = librosa.feature.mfcc(y=data, sr=sampling_rate, n_mfcc=10)
print(features_new.shape)
print(features_new)
# 10517 / 22050
# librosa.display.waveplot(data, sr=sampling_rate)

plt.figure(figsize=(10, 4))
librosa.display.specshow(features_new, x_axis='time')
plt.colorbar()
plt.title('MFCC')
plt.tight_layout()

features_new = librosa.feature.mfcc(y=data, sr=sampling_rate, n_mfcc=5)
for i in range(len(features_new)):
  print(st.mean(features_new[i]))